/* Design Tokens (as SCSS variables)
   ========================================================================== */

// Color

// Neutrals
$white: #ffffff;
$grey-050: hsl(0, 0%, 97%);
$grey-100: hsl(0, 0%, 88%);
$grey-200: hsl(0, 0%, 81%);
$grey-300: hsl(0, 0%, 69%);
$grey-400: hsl(0, 0%, 62%);
$grey-500: hsl(0, 0%, 50%);
$grey-600: hsl(0, 0%, 38%);
$grey-700: hsl(0, 0%, 32%);
$grey-800: hsl(0, 0%, 23%);
$grey-900: hsl(0, 0%, 13%);
$black: #000000;

// Primary
$teal-050: #F0FCF9;
$teal-100: #C6F7E9;
$teal-200: #8EEDD1;
$teal-300: #5FE3C0;
$teal-400: #2DCCA7;
$teal-500: #17B897;
$teal-600: #079A82;
$teal-700: #048271;
$teal-800: #016457;
$teal-900: #004440;

// Space
// Proportionally scaled from the 8pt grid
$space-xxs:   0.125rem; // 2pt  (px)
$space-xs:    0.25rem;  // 4pt  (px)
$space-s:     0.5rem;   // 8pt  (px)
$space-m:     1rem;     // 16pt (px)
$space-l:     2rem;     // 32pt (px)
$space-xl:    4rem;     // 64pt (px)
$space-xxl:   8rem;     // 12pt (px)

// Type
$family-sans-serif: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;

// Radius
$radius-s:  0.125rem;   // 2pt  (px)
$radius-m:  0.1875rem;  // 3pt  (px)
$radius-l:  0.375rem;   // 6pt  (px)

// Elevation
$box-shadow-01: 0 4px 6px rgba($grey-900, 0.07),
                0 5px 15px rgba($grey-900, 0.1);

// Animation
$easing: ease-out;
$speed: 250ms;

// Responsivity
$desktop: 1152px;


/* Mixins (For design pattern reusability)
   ========================================================================== */

// Desktop Media Query
/// Creates a Media Query for anything larger than tablet sizes
/// We use a desktop size token (SCSS variable) to set the viewport width for desktop layouts
/// No need for a mobile version, as we're designing mobile first! :)
@mixin desktop {
  @media screen and (min-width: $desktop) {
    @content;
  }
}


/* Fuctions (for automating styles, and assisting with units)
   SCSS can be quite programatic, and helpful for design
   ========================================================================== */

// PX--REM: Designers hate math sometimes. This makes life easy.
/// Convert a given px unit to a rem unit
/// @param {Number} $px - Number with px unit
/// @return {Number} Number with rem unit

@function px--rem($px) {
  @return ($px / 16px) * 1rem;
}

// Baseline Scale: A line-height/leading helper based on 8pt grid
/// Get the value of a specific step in a 8pt grid scale
/// @param {Number} $step - Degree of 8pt increments
/// @return {Number} Value in pixels, converted from rem

@function baseline-scale($step) {
  @return (px--rem($step * 8px));
}

/// Get Type Size
/// Compute the type size for the given type scale step
/// From IBM's Carbon Design System: https://www.carbondesignsystem.com/guidelines/typography/overview/#scale
/// @param {Number} $step
/// @return {Number} In px
@function get-type-size($step) {
  @if $step == 1 {
    @return 12px;
  }
  // Yn = Yn-1 + {INT[(n-2)/4] + 1} * 2
  @return get-type-size($step - 1) + (floor(($step - 2) / 4) + 1) * 2;
}

/// Type Scale Map
/// Type scale follows a custom formula for determining each step size and supports sizes from 12px to 92px
/// @type Map
$type-scale: ();
@for $i from 1 through 23 {
  $type-scale: append(
    $type-scale,
    px--rem(get-type-size($i))
  );
}
/// Type Scale Value
/// Get the value of a specific step in the typescale
/// @param {Number} $step
/// @return {Number} In rem
@function type-scale($step) {
  @return nth($type-scale, $step);
}
